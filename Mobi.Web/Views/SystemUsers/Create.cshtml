@{
    ViewData["Title"] = @T("Mobi.SystemUser.Title");
}

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-info text-white">
            <h3 class="card-title mb-0">@T("Mobi.SystemUser.Header")</h3>
        </div>
        <div class="card-body">
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="@T("Mobi.SystemUser.Close")"></button>
                </div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="@T("Mobi.SystemUser.Close")"></button>
                </div>
            }

            <form id="userForm">
                <input type="hidden" name="employeeId" >
                <div class="row mb-3">
                    <div class="col-md-6 position-relative">
                        <label for="EmployeeName" class="form-label">@T("Mobi.SystemUser.EmployeeName")</label>
                        <input id="EmployeeName" class="form-control" placeholder="@T("Mobi.SystemUser.EmployeeName.Placeholder")" autocomplete="off" />
                        <ul id="EmployeeNameDropdown" class="list-group position-absolute mt-1" style="display: none; z-index: 1000;"></ul>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="UserName" class="form-label">@T("Mobi.SystemUser.UserName")</label>
                        <input id="UserName" class="form-control" placeholder="@T("Mobi.SystemUser.UserName.Placeholder")" />
                        <span class="text-danger" id="UserNameError"></span>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="Password" class="form-label">@T("Mobi.SystemUser.Password")</label>
                        <input id="Password" type="password" class="form-control" placeholder="@T("Mobi.SystemUser.Password.Placeholder")" />
                        <span class="text-danger" id="PasswordError"></span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <h5>@T("Mobi.SystemUser.ScreenAuthority")</h5>
                        <div id="authority-list">
                            @foreach (var authority in Enum.GetValues(typeof(ScreenAuthorityEnum)))
                            {
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="@authority" name="authorities" value="@authority">
                                    <label class="form-check-label" for="@authority">@authority</label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-end mt-3">
                    <a href="@Url.Action("index")" class="btn btn-light">@T("Mobi.SystemUser.ButtonCancel")</a>
                    <button id="saveAccess" type="button" class="btn btn-success">@T("Mobi.SystemUser.ButtonSave")</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let selectedUserId = 0;
        const employeeNameInput = document.getElementById("EmployeeName");
        const employeeNameDropdown = document.getElementById("EmployeeNameDropdown");
        const userNameInput = document.getElementById("UserName");
        const employeeId = document.getElementById("employeeId");

        function adjustDropdownWidth() {
            employeeNameDropdown.style.width = `${employeeNameInput.offsetWidth}px`;
        }

        employeeNameInput.addEventListener("focus", adjustDropdownWidth);
        window.addEventListener("resize", adjustDropdownWidth);

        employeeNameInput.addEventListener("input", function () {
            const term = employeeNameInput.value;
            if (term.length < 3) {
                employeeNameDropdown.style.display = "none";
                return;
            }

            employeeNameDropdown.innerHTML = '<li class="list-group-item">@T("Mobi.SystemUser.Loading")</li>';
            employeeNameDropdown.style.display = "block";

            fetch(`/SystemUsers/GetEmployeeNames?term=${term}`)
                .then((response) => response.json())
                .then((data) => {
                    employeeNameDropdown.innerHTML = "";
                    if (data.length === 0) {
                        employeeNameDropdown.innerHTML = '<li class="list-group-item text-muted">@T("Mobi.SystemUser.NoRecordFound")</li>';
                    } else {
                        data.forEach((item) => {
                            const option = document.createElement("li");
                            option.textContent = item.nameEng;
                            option.setAttribute("data-id", item.id);
                            option.setAttribute("data-username", item.userName);
                            option.classList.add("list-group-item");
                            option.style.cursor = "pointer";
                            option.addEventListener("click", function () {
                                employeeNameInput.value = item.nameEng;
                                userNameInput.value = item.userName || "";
                                selectedUserId = item.id;
                                employeeNameDropdown.style.display = "none";
                                employeeId = item.id;
                                fetchAccess(selectedUserId);
                            });
                            employeeNameDropdown.appendChild(option);
                        });
                    }
                })
                .catch(() => {
                    employeeNameDropdown.innerHTML = '<li class="list-group-item text-danger">@T("Mobi.SystemUser.ErrorFetchingData")</li>';
                });
        });

        document.addEventListener("click", function (event) {
            if (!employeeNameInput.contains(event.target) && !employeeNameDropdown.contains(event.target)) {
                employeeNameDropdown.style.display = "none";
            }
        });

        function fetchAccess(userId) {
            fetch(`/SystemUsers/GetAccessForEmployee?userId=${userId}`)
                .then((response) => response.json())
                .then((data) => {
                    document.querySelectorAll("input[name='authorities']").forEach((input) => input.checked = false);
                    data.forEach((item) => {
                        const checkbox = document.querySelector(`#authority-list input[value='${item.screenAuthority}']`);
                        if (checkbox) checkbox.checked = true;
                    });
                })
                .catch(() => alert("@T("Mobi.SystemUser.ErrorFetchingAccess")"));
        }

        document.getElementById("saveAccess").addEventListener("click", function () {
            const passwordInput = document.getElementById("Password");
            const userNameError = document.getElementById("UserNameError");
            const passwordError = document.getElementById("PasswordError");

            if (selectedUserId === 0) {
                alert("@T("Mobi.SystemUser.SelectEmployeeFirst")");
                return;
            }

            userNameError.textContent = "";
            passwordError.textContent = "";

            if (!userNameInput.value.trim()) {
                userNameError.textContent = "@T("Mobi.SystemUser.Validation.UserNameRequired")";
                return;
            }

            if (!passwordInput.value.trim()) {
                passwordError.textContent = "@T("Mobi.SystemUser.Validation.PasswordRequired")";
                return;
            }

            let score = "";
            const pwd = passwordInput.value.trim();

            if (/^[0-9]{0,100}$/.test(pwd)) {
                score = "VeryWeak";
            } else if (/^[A-Za-z]{0,100}$/.test(pwd) || pwd.length < 6) {
                score = "VeryWeak";
            } else if (pwd.length >= 6 && /^(?=.*?[0-9a-zA-Z])(?=.*?[#?!@@$%^&*-]).{6,}$/.test(pwd)) {
                score = "Strong";
            } else {
                score = "Medium";
            }

            if (score === "VeryWeak") {
                passwordError.textContent = "@T("Mobi.SystemUser.Validation.PasswordStrength")";
                return;
            }

            const selectedAuthorities = Array.from(document.querySelectorAll("input[name='authorities']:checked")).map(input => input.value);

            const requestData = {
                userId: selectedUserId,
                userName: userNameInput.value,
                password: passwordInput.value,
                authorities: selectedAuthorities
            };

            fetch(`/SystemUsers/SaveAccess`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(requestData)
            })
                .then(response => {
                    if (response.status === 409) {
                        return response.text().then(errorMessage => {
                            userNameError.textContent = errorMessage;
                            throw new Error(errorMessage);
                        });
                    }
                    if (response.ok) {
                        alert("@T("Mobi.SystemUser.SaveSuccess")");
                        window.location.href = "/systemusers/index";
                    } else {
                        alert("@T("Mobi.SystemUser.SaveError")");
                    }
                });
        });
    });
</script>
