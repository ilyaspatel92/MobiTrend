@model EmployeeAttendanceModel
@{
    ViewData["Title"] = "Employees Attendance Logs";
}
<div class="container mt-4">
    <!-- Card Wrapper -->
    <div class="card bg-light shadow-sm">
        <div class="card-header text-center">
            <h3 class="card-title">Employees Attendance Logs</h3>
        </div>
        <div class="card-body">
            <!-- Filters -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <label for="startDate" class="form-label">Start Date</label>
                    <input type="date" id="startDate" class="form-control" value="@Model.StartDate?.ToString("yyyy-MM-dd")">
                </div>
                <div class="col-md-3">
                    <label for="endDate" class="form-label">End Date</label>
                    <input type="date" id="endDate" class="form-control" value="@Model.EndDate?.ToString("yyyy-MM-dd")">
                </div>
                <div class="col-md-3">
                    <label for="employeeName" class="form-label">Employee Name</label>
                    <input type="text" id="employeeName" class="form-control" placeholder="Enter 3 Character for Search Employee" autocomplete="off">
                    <ul id="autocomplete-results" class="list-group position-absolute w-100" style="max-height: 200px; overflow-y: auto; z-index: 1000; display: none;"></ul>
                </div>
                <div class="col-md-3">
                    <label for="employeeId" class="form-label">Employee ID</label>
                    <input type="text" id="employeeId" class="form-control" placeholder="Enter Employee ID">
                </div>
            </div>

            <!-- Buttons -->
            <div class="row mb-4 text-center">
                <div class="col">
                    <button id="searchButton" class="btn btn-primary btn-lg">Search</button>
                    <button id="printButton" class="btn btn-secondary btn-lg">Print</button>
                </div>
            </div>

            <!-- Table -->
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Employee Name</th>
                            <th>Date and Time</th>
                            <th>Trans Type</th>
                            <th>Proof Type</th>
                            <th>Location</th>
                        </tr>
                    </thead>
                    <tbody id="attendanceTableBody">
                        @if (Model.AttendanceLogs != null && Model.AttendanceLogs.Any())
                        {
                            int index = 1;
                            foreach (var log in Model.AttendanceLogs)
                            {
                                <tr>
                                    <td>@index</td>
                                    <td>@log.EmployeeName</td>
                                    <td>@log.DateAndTime</td>
                                    <td>
                                        <span class="badge @log.ActionTypeClass">@log.ActionTypeName</span>
                                    </td>
                                    <td>@log.ProofType</td>
                                    <td>@log.Location</td>
                                </tr>
                                index++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center">No records found</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Get references to input fields and buttons
            const searchButton = document.getElementById("searchButton");
            const startDateInput = document.getElementById("startDate");
            const endDateInput = document.getElementById("endDate");
            const employeeNameInput = document.getElementById("employeeName");
            const employeeIdInput = document.getElementById("employeeId");
            const tableBody = document.getElementById("attendanceTableBody");

            // Add event listener for the search button
            searchButton.addEventListener("click", function () {
                const startDate = startDateInput.value;
                const endDate = endDateInput.value;
                const employeeName = employeeNameInput.value;
                const employeeId = employeeIdInput.value;

                // Make an AJAX request using the Fetch API
                fetch(`/EmployeeAttendance/Search?startDate=${startDate}&endDate=${endDate}&employeeName=${employeeName}&employeeId=${employeeId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("Error loading attendance logs.");
                        }
                        return response.text(); // Assuming the server returns an HTML fragment
                    })
                    .then(data => {
                        // Update the table body with the response data
                        tableBody.innerHTML = data;
                    })
                    .catch(error => {
                        alert(error.message);
                    });
            });


            // const employeeNameInput = document.getElementById("employeeName");
            // const employeeIdInput = document.getElementById("employeeId");
            const autocompleteResults = document.getElementById("autocomplete-results");

            let typingTimer; // Timer to handle debounce
            const typingInterval = 500; // Wait 500ms after typing stops

            // Initialize autocomplete for employee name
            employeeNameInput.addEventListener("input", function () {
                const query = employeeNameInput.value.trim();
                if (query.length >= 3) {
                    clearTimeout(typingTimer);
                    typingTimer = setTimeout(function () {
                        fetch(`/EmployeeLocation/GetEmployeeSuggestions?term=${query}`)
                            .then(response => response.json())
                            .then(data => {
                                showAutocompleteResults(data);
                            })
                            .catch(error => {
                                console.error("Error fetching employee suggestions:", error);
                            });
                    }, typingInterval);
                } else {
                    autocompleteResults.style.display = "none";
                }
            });

            // Show autocomplete suggestions
                function showAutocompleteResults(employees) {
            autocompleteResults.innerHTML = ""; // Clear previous suggestions
            if (employees.length === 0) {
                autocompleteResults.style.display = "none";
                return;
            }

            employees.forEach(employee => {
                const li = document.createElement("li");
                li.classList.add("list-group-item", "cursor-pointer");
                li.textContent = employee.label;
                li.addEventListener("click", function () {
                    selectEmployee(employee);
                });
                autocompleteResults.appendChild(li);
            });

            // Get the position of the input field
            const rect = employeeNameInput.getBoundingClientRect();

            // Set position and width of the dropdown
            autocompleteResults.style.width = `${rect.width}px`; // Match input width
            autocompleteResults.style.display = "block"; // Show results
        }


            // Handle employee selection from the autocomplete results
            function selectEmployee(employee) {
                employeeNameInput.value = employee.label; // Set employee name
                employeeIdInput.value = employee.id; // Set employee ID

                // Load locations for the selected employee
                // loadLocations(employee.id);

                // Hide the autocomplete dropdown after selection
                autocompleteResults.style.display = "none";
            }
        });
    </script>
}

