@model LocationModel

<form asp-action="Create" method="post" class="needs-validation" novalidate>
    <div class="card card-info card-outline mb-4">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h4 class="card-title mb-0">Edit Location</h4>
                <div class="d-flex">
                    <a href="@Url.Action("List", "Location")" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </a>
                    <button type="submit" class="btn btn-primary" id="saveLocationButton">
                        Save Location
                    </button>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <!-- Location Name (English) -->
                <div class="col-md-6">
                    <label asp-for="LocationNameEnglish" class="form-label">Location Name (English)</label>
                    <input asp-for="LocationNameEnglish" class="form-control" placeholder="Enter Location Name (English)" required>
                    <span asp-validation-for="LocationNameEnglish" class="text-danger"></span>
                </div>

                <!-- Location Name (Arabic) -->
                <div class="col-md-6">
                    <label asp-for="LocationNameArabic" class="form-label">Location Name (Arabic)</label>
                    <input asp-for="LocationNameArabic" class="form-control" placeholder="Enter Location Name (Arabic)">
                    <span asp-validation-for="LocationNameArabic" class="text-danger"></span>
                </div>

                <!-- Status -->
                <div class="col-md-6">
                    <label asp-for="Status" class="form-label">Status</label>
                    <select asp-for="Status" class="form-select" required>
                        <option value="true" selected>Active</option>
                        <option value="false">Inactive</option>
                    </select>
                    <span asp-validation-for="Status" class="text-danger"></span>
                </div>
            </div>

            <!-- Proof Type (Radio Buttons) -->
            <div class="form-group mb-4">
                <label>Proof Type</label>
                <div>
                    <!-- GPS Proof Radio Button -->
                    <input id="gpsProofRadio" type="radio" name="ProofType" value="2" class="form-check-input" checked />
                    <label for="gpsProofRadio" class="form-check-label">GPS Proof</label>

                    <!-- Beacon Proof Radio Button -->
                    <input id="beaconProofRadio" type="radio" name="ProofType" value="1" class="form-check-input ms-3" />
                    <label for="beaconProofRadio" class="form-check-label">Beacon Proof</label>
                </div>
            </div>

            <!-- Collapsible Section for GPS Proof -->
            <div id="gpsProofSection" class="collapse mt-3">
                <h4>Map Coordination</h4>
                <p>Include your map or related content here for GPS Proof.</p>
                <div id="map" style="height: 400px; border: 1px solid #ccc;"></div>
                <button type="button" class="btn btn-secondary mt-2">Draw Polygon</button>
                <button type="button" class="btn btn-secondary mt-2">Set Radius</button>
            </div>

            <!-- Collapsible Section for Beacon List -->
            <div id="beaconProofSection" class="collapse mt-3">
                <h4>Beacon List</h4>
                <p>Manage your beacons below:</p>
                <table class="table table-striped table-bordered" id="beaconListTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Beacon Name</th>
                            <th>UUID</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Rows will be dynamically added here -->
                    </tbody>
                </table>
                <button type="button" class="btn btn-success mt-2" id="addNewBeacon">Add New</button>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <!-- JavaScript to control collapsibles and beacon management -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const gpsRadio = document.getElementById("gpsProofRadio");
            const beaconRadio = document.getElementById("beaconProofRadio");
            const gpsSection = document.getElementById("gpsProofSection");
            const beaconSection = document.getElementById("beaconProofSection");

            // Initialize Bootstrap Collapse for each section
            const gpsCollapse = new bootstrap.Collapse(gpsSection, { toggle: false });
            const beaconCollapse = new bootstrap.Collapse(beaconSection, { toggle: false });

            // Show the correct section based on the default checked radio button
            if (beaconRadio.checked) {
                beaconCollapse.show();
            } else if (gpsRadio.checked) {
                gpsCollapse.show();
            }

            // Toggle GPS Proof Section
            gpsRadio.addEventListener("change", function () {
                if (gpsRadio.checked) {
                    gpsCollapse.show(); // Show GPS section
                    beaconCollapse.hide(); // Hide Beacon section
                }
            });

            // Toggle Beacon Proof Section
            beaconRadio.addEventListener("change", function () {
                if (beaconRadio.checked) {
                    beaconCollapse.show(); // Show Beacon section
                    gpsCollapse.hide(); // Hide GPS section
                }
            });
        });

        document.addEventListener("DOMContentLoaded", function () {
            const tableBody = document.querySelector("#beaconListTable tbody");
            const addNewBeaconBtn = document.getElementById("addNewBeacon");
            const locationId = getLocationIdFromUrl();

            // Load existing beacons on page load
            loadBeaconList();

            // Fetch all beacons and render in the table
            function loadBeaconList() {
                fetch(`/LocationBeacon/GetBeacons?locationId=${locationId}`)
                    .then((response) => response.json())
                    .then((beacons) => {
                        tableBody.innerHTML = "";
                        beacons.forEach((beacon) => {
                            const row = createRow(beacon);
                            tableBody.appendChild(row);
                        });
                    })
                    .catch((error) => console.error("Error loading beacons:", error));
            }

            // Add New Beacon Row
            addNewBeaconBtn.addEventListener("click", function () {
                const newRow = createEditableRow();
                tableBody.appendChild(newRow);
            });

            // Create a row for an existing beacon
            function createRow(beacon) {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${beacon.beaconName}</td>
                    <td>${beacon.uuid}</td>
                    <td>${beacon.status ? "Active" : "Inactive"}</td>
                    <td>
                        <button type="button" class="btn btn-warning editBeacon">Edit</button>
                        <button type="button" class="btn btn-danger deleteBeacon ms-2">Delete</button>
                    </td>
                `;

                // Attach Edit and Delete event listeners
                row.querySelector(".editBeacon").addEventListener("click", function () {
                    const editableRow = createEditableRow(beacon);
                    row.replaceWith(editableRow);
                });

                row.querySelector(".deleteBeacon").addEventListener("click", function () {
                    if (confirm("Are you sure you want to delete this beacon?")) {
                        deleteBeacon(beacon.id, row);
                    }
                });

                return row;
            }

            // Create an editable row for adding or editing a beacon
            function createEditableRow(beacon = {}) {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td><input type="text" class="form-control" value="${beacon.beaconName || ""}" placeholder="Enter Beacon Name"></td>
                    <td><input type="text" class="form-control" value="${beacon.uuid || ""}" placeholder="Enter UUID"></td>
                    <td>
                        <select class="form-select">
                            <option value="true" ${beacon.status ? "selected" : ""}>Active</option>
                            <option value="false" ${!beacon.status ? "selected" : ""}>Inactive</option>
                        </select>
                    </td>
                    <td>
                        <button type="button" class="btn btn-primary saveBeacon">Save</button>
                        <button type="button" class="btn btn-danger cancelBeacon ms-2">Cancel</button>
                    </td>
                `;

                row.querySelector(".saveBeacon").addEventListener("click", function () {
                    saveBeacon(row, beacon.id);
                });

                row.querySelector(".cancelBeacon").addEventListener("click", function () {
                    if (beacon.id) {
                        row.replaceWith(createRow(beacon));
                    } else {
                        row.remove();
                    }
                });

                return row;
            }

            // Save a beacon via AJAX (Add or Update)
            function saveBeacon(row, id) {
                const inputs = row.querySelectorAll("input");
                const select = row.querySelector("select");
                const beacon = {
                    Id: id || 0,
                    BeaconName: inputs[0].value.trim(),
                    UUID: inputs[1].value.trim(),
                    Status: select.value === "true",
                    LocationId: locationId,
                };

                const url = id ? "/LocationBeacon/Edit" : "/LocationBeacon/Create";
                const method = id ? "PUT" : "POST";

                fetch(url, {
                    method: method,
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(beacon),
                })
                    .then((response) => response.json())
                    .then((savedBeacon) => {
                        row.replaceWith(createRow(savedBeacon));
                    })
                    .catch((error) => {
                        console.error("Error saving beacon:", error);
                        alert("Failed to save the beacon. Please try again.");
                    });
            }

            // Delete a beacon via AJAX
            function deleteBeacon(id, row) {
                fetch(`/LocationBeacon/Delete?id=${id}`, {
                    method: "DELETE",
                })
                    .then((response) => {
                        if (!response.ok) throw new Error("Failed to delete the beacon.");
                        row.remove();
                    })
                    .catch((error) => {
                        console.error("Error deleting beacon:", error);
                        alert("Failed to delete the beacon. Please try again.");
                    });
            }
        });

        // Function to extract the LocationId from the current URL
        function getLocationIdFromUrl() {
            const url = window.location.href;
            const urlSegments = url.split('/');
            return urlSegments[urlSegments.length - 1];
        }
    </script>

    <script>
        function initMap() {
            const map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 40.7128, lng: -74.0060 },
                zoom: 12
            });
        }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap" async defer></script>
}
