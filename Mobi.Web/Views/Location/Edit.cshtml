@model LocationModel
<form asp-action="Edit" method="post" class="needs-validation" novalidate id="locationForm">
    <div class="card card-info card-outline mb-4">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h4 class="card-title mb-0">Edit Location</h4>
                <div class="d-flex">
                    <a href="@Url.Action("List", "Location")" class="btn btn-secondary editlocation" style="margin-right: 15px;">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </a>
                    <button type="submit" class="btn btn-primary" id="saveLocationButton">
                        <i class="fas fa-plus"></i>  Save Location
                    </button>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <!-- Location Name (English) -->
                <div class="col-md-6">
                    <label asp-for="LocationNameEnglish" class="form-label">Location Name (English)</label>
                    <input asp-for="LocationNameEnglish" class="form-control" placeholder="Enter Location Name (English)" required>
                    <span asp-validation-for="LocationNameEnglish" class="text-danger"></span>
                </div>

                <!-- Location Name (Arabic) -->
                <div class="col-md-6">
                    <label asp-for="LocationNameArabic" class="form-label">Location Name (Arabic)</label>
                    <input asp-for="LocationNameArabic" class="form-control" placeholder="Enter Location Name (Arabic)">
                    <span asp-validation-for="LocationNameArabic" class="text-danger"></span>
                </div>

                <!-- Status -->
                <div class="col-md-6">
                    <label asp-for="Status" class="form-label">Status</label>
                    <select asp-for="Status" class="form-select" required>
                        <option value="true" selected>Active</option>
                        <option value="false">Inactive</option>
                    </select>
                    <span asp-validation-for="Status" class="text-danger"></span>
                </div>
            </div>

            <!-- Proof Type (Radio Buttons) -->
            <div class="form-group mb-4">
                <label>Proof Type</label>
                <div>
                    <!-- GPS Proof Radio Button -->
                    <input id="gpsProofRadio" type="radio" name="ProofType" value="1" class="form-check-input" @(Model.ProofType == (int)ProofType.GPS ? "checked" : "") />
                    <label for="gpsProofRadio" class="form-check-label">GPS Proof</label>

                    <!-- Beacon Proof Radio Button -->
                    <input id="beaconProofRadio" type="radio" name="ProofType" value="2" class="form-check-input ms-3" @(Model.ProofType == (int)ProofType.Beacon ? "checked" : "") />
                    <label for="beaconProofRadio" class="form-check-label">Beacon Proof</label>
                </div>
            </div>

            <!-- Collapsible Section for GPS Proof -->
            <div id="gpsProofSection" class="collapse mt-3">
                <h4>Map Coordination</h4>
                <p>Search for a location or provide coordinates for GPS Proof.</p>

                <!-- Address Input -->
                <div class="mb-3">

                    <input asp-for="GPSLocationAddress" id="autocomplete" class="form-control" placeholder="search address">
                    @* <input id="autocomplete" type="text" class="form-control" placeholder="search address"> *@
                </div>

                <!-- Coordinates Display -->
                <div class="d-flex mb-3">
                    <div class="me-2">
                        <label for="latitude" class="form-label">Latitude</label>
                        <input id="latitude" name="latitude" class="form-control" value="@Model.Latitude.ToString("F6")" readonly>

                    </div>
                    <div>
                        <label for="longitude" class="form-label">Longitude</label>
                        <input id="longitude" name="longitude" class="form-control" value="@Model.Longitude.ToString("F6")" readonly>
                    </div>
                    <div>
                        <label for="Radius" class="form-label">Radius</label>
                        <input asp-for="SetRadius" id="SetRadius" class="form-control" name="SetRadius" readonly />
                    </div>
                </div>
                <input asp-for="SetPolygon" id="SetPolygon" class="form-control" type="hidden" name="SetPolygon" />
                <input asp-for="SetRadius" id="SetRadius" class="form-control" type="hidden" name="SetRadius" />
                <!-- Map -->
                <div id="locationmap" style="height: 400px; border: 1px solid #ccc;"></div>
                <button type="button" class="btn btn-secondary mt-2" id="drawPolygonButton">Draw Polygon</button>
                <button type="button" class="btn btn-secondary mt-2" id="setRadiusButton">Set Radius</button>
                <button type="button" class="btn btn-danger mt-2" id="clearShapesButton" hidden>Clear Shapes</button>

            </div>

            <!-- Collapsible Section for Beacon List -->
            <div id="beaconProofSection" class="collapse mt-3">
                <h4>Beacon List</h4>
                <p>Manage your beacons below:</p>
                <table class="table table-striped table-bordered" id="beaconListTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Beacon Name</th>
                            <th>UUID</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Rows will be dynamically added here -->
                    </tbody>
                </table>
                <button type="button" class="btn btn-success mt-2" id="addNewBeacon"><i class="fas fa-search"></i> Add New</button>
            </div>
        </div>
    </div>
</form>

<style>
    #locationmap {
        height: 500px;
        width: 100%;
    }

</style>

@section Scripts {
    @* <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAkN-Q_IuLUmbFX_QHCzEEecAufZmwpZ7k&libraries=places,drawing" async defer></script> *@
    @* <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAkN-Q_IuLUmbFX_QHCzEEecAufZmwpZ7k&libraries=places,drawing&callback=initMap" async defer></script> *@

    <script>
        let map, marker, autocomplete, polygon, circle;

        function initMap() {
            //console.log("✅ Google Maps API Loaded!");

            if (typeof google === "undefined" || !google.maps) {
                console.log("❌ Google Maps API failed to load.");
                return;
            }

            // Ensure map container exists
                const mapElement = document.getElementById("locationmap");
            if (!mapElement) {
                console.log("❌ ERROR: Map container not found!");
                return;
            }

            // Initialize Map
            map = new google.maps.Map(mapElement, {
                center: { lat: 40.7128, lng: -74.0060 }, // Default to NYC
                zoom: 12,
            });

                 // Initialize Advanced Marker
                    const markerElement = document.createElement("div");
                    markerElement.innerHTML = "📍"; // Custom marker emoji (optional)

                           marker = new google.maps.Marker({
            position: { lat: 40.7128, lng: -74.0060 },
            map: map,
            title: "Selected Location",
            draggable: true
        });


                            // Get the position correctly
            const markerPosition = marker.position;
            map.setCenter(markerPosition);

                    // Ensure the input exists
            const autocompleteInput = document.getElementById("autocomplete");

            if (autocompleteInput) {
                   autocomplete = new google.maps.places.Autocomplete(autocompleteInput);

                  autocomplete.addListener("place_changed", () => {
            const place = autocomplete.getPlace();
            if (!place.geometry || !place.geometry.location) {
                alert("No details available for the selected location.");
                return;
            }

            const location = place.geometry.location;

            map.setCenter(location);
            map.setZoom(15);
            marker.setPosition(location);


            // Optional: update hidden fields
            document.getElementById("latitude").value = location.lat().toFixed(6);
            document.getElementById("longitude").value = location.lng().toFixed(6);
        });

            }

            // Load Saved Polygon & Radius (if available)
            loadSavedShapes();

            // Attach Event Listeners
            document.getElementById("drawPolygonButton")?.addEventListener("click", drawPolygon);
            document.getElementById("setRadiusButton")?.addEventListener("click", setRadius);
            document.getElementById("clearShapesButton")?.addEventListener("click", clearShapes);

                    const lat = parseFloat(document.getElementById("latitude").value);
        const lng = parseFloat(document.getElementById("longitude").value);

        if (!isNaN(lat) && !isNaN(lng)) {
            const savedPosition = { lat, lng };
            marker.setPosition(savedPosition);
            map.setCenter(savedPosition);
        }

                google.maps.event.addListener(marker, 'dragend', function () {
            const pos = marker.getPosition();
            document.getElementById("latitude").value = pos.lat().toFixed(6);
            document.getElementById("longitude").value = pos.lng().toFixed(6);
        });


        }

        function loadGoogleMaps() {
            if (window.google && window.google.maps) {
                console.warn("⚠️ Google Maps API already loaded.");
                initMap();
                return;
            }

            const script = document.createElement("script");
                script.src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyAkN-Q_IuLUmbFX_QHCzEEecAufZmwpZ7k&libraries=places,drawing,marker&callback=initMap&loading=async";
            script.async = true;
            script.defer = true;
            document.head.appendChild(script);
        }

        // Ensure Google Maps Loads Before Running initMap
        document.addEventListener("DOMContentLoaded", loadGoogleMaps);

        // Draw a Polygon
        function drawPolygon() {
            clearShapes();
            const drawingManager = new google.maps.drawing.DrawingManager({
                drawingMode: google.maps.drawing.OverlayType.POLYGON,
                drawingControl: false,
                polygonOptions: {
                    fillColor: "#FF0000",
                    fillOpacity: 0.35,
                    strokeWeight: 2,
                    clickable: true,
                    editable: true,
                    zIndex: 1,
                },
            });

            drawingManager.setMap(map);

            google.maps.event.addListener(drawingManager, "overlaycomplete", function (event) {
                if (event.type === google.maps.drawing.OverlayType.POLYGON) {
                    polygon = event.overlay;
                    drawingManager.setDrawingMode(null);
                    drawingManager.setMap(null);

                    // Convert polygon path to JSON and set hidden field
                    const path = polygon.getPath().getArray().map((latLng) => ({
                        lat: latLng.lat(),
                        lng: latLng.lng(),
                    }));

                    document.getElementById("SetPolygon").value = JSON.stringify(path);
                    document.getElementById("SetRadius").value = "0"; // Clear radius
                    alert("Polygon drawn!");
                }
            });
        }

        // Set a Radius around the Marker
        function setRadius() {
            clearShapes();
            const radius = prompt("Enter radius in meters:", "1000");
            if (isNaN(radius) || radius <= 0) {
                alert("Please enter a valid radius in meters.");
                return;
            }

            circle = new google.maps.Circle({
                map: map,
                radius: parseFloat(radius),
                center: marker.position,
                fillColor: "#00FF00",
                fillOpacity: 0.35,
                strokeWeight: 2,
            });

            map.fitBounds(circle.getBounds());
                // Set radius and clear polygon
            document.getElementById("SetRadius").value = radius;
            document.getElementById("SetPolygon").value = "";
        }

        // Clear Polygon & Circle from the Map
        function clearShapes() {
            if (polygon) {
                polygon.setMap(null);
                polygon = null;
            }
            if (circle) {
                circle.setMap(null);
                circle = null;
            }
        }

        // Load Saved Polygon & Radius from Hidden Inputs
        function loadSavedShapes() {
            const savedPolygonData = document.getElementById("SetPolygon")?.value;
            const savedRadius = parseFloat(document.getElementById("SetRadius")?.value);

            if (savedPolygonData) {
                try {
                    const polygonCoords = JSON.parse(savedPolygonData);
                    polygon = new google.maps.Polygon({
                        paths: polygonCoords,
                        map: map,
                        fillColor: "#FF0000",
                        fillOpacity: 0.35,
                        strokeWeight: 2,
                        editable: true,
                    });

                    // Fit map to polygon bounds
                    const bounds = new google.maps.LatLngBounds();
                    polygonCoords.forEach(coord => bounds.extend(new google.maps.LatLng(coord.lat, coord.lng)));
                    map.fitBounds(bounds);
                } catch (error) {
                    console.log("❌ Failed to load saved polygon:", error);
                }
            }

                    if (!isNaN(savedRadius) && savedRadius > 0) {
            const lat = parseFloat(document.getElementById("latitude").value);
            const lng = parseFloat(document.getElementById("longitude").value);

            if (!isNaN(lat) && !isNaN(lng)) {
                const center = new google.maps.LatLng(lat, lng);

                circle = new google.maps.Circle({
                    map: map,
                    radius: savedRadius,
                    center: center,
                    fillColor: "#00FF00",
                    fillOpacity: 0.35,
                    strokeWeight: 2,
                });

                marker.setPosition(center); // Move marker here
                map.fitBounds(circle.getBounds());
            }
        }

        }
    </script>


    <!-- JavaScript to control collapsibles and beacon management -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
                    // Retrieve saved polygon and radius from hidden inputs
        // const savedPolygonData = document.getElementById("SetPolygon").value;
        // const savedRadius = parseFloat(document.getElementById("SetRadius").value);

        // if (savedPolygonData) {
        //     const polygonCoords = JSON.parse(savedPolygonData);
        //     polygon = new google.maps.Polygon({
        //         paths: polygonCoords,
        //         map: map,
        //         fillColor: "#FF0000",
        //         fillOpacity: 0.35,
        //         strokeWeight: 2,
        //         editable: true,
        //     });

        //     // Fit map to polygon bounds
        //     const bounds = new google.maps.LatLngBounds();
        //     polygonCoords.forEach(coord => bounds.extend(new google.maps.LatLng(coord.lat, coord.lng)));
        //     map.fitBounds(bounds);
        // }

        // if (!isNaN(savedRadius) && savedRadius > 0) {
        //     circle = new google.maps.Circle({
        //         map: map,
        //         radius: savedRadius,
        //         center: marker.getPosition(),
        //         fillColor: "#00FF00",
        //         fillOpacity: 0.35,
        //         strokeWeight: 2,
        //     });

        //     // Fit map to the circle bounds
        //     map.fitBounds(circle.getBounds());
        // }


            const gpsRadio = document.getElementById("gpsProofRadio");
            const beaconRadio = document.getElementById("beaconProofRadio");
            const gpsSection = document.getElementById("gpsProofSection");
            const beaconSection = document.getElementById("beaconProofSection");

            // Initialize Bootstrap Collapse for each section
            const gpsCollapse = new bootstrap.Collapse(gpsSection, { toggle: false });
            const beaconCollapse = new bootstrap.Collapse(beaconSection, { toggle: false });

            // Show the correct section based on the default checked radio button
            if (beaconRadio.checked) {
                beaconCollapse.show();
            } else if (gpsRadio.checked) {
                gpsCollapse.show();
            }

            // Toggle GPS Proof Section
            gpsRadio.addEventListener("change", function () {
                if (gpsRadio.checked) {
                    gpsCollapse.show(); // Show GPS section
                    beaconCollapse.hide(); // Hide Beacon section
                }
            });

            // Toggle Beacon Proof Section
            beaconRadio.addEventListener("change", function () {
                if (beaconRadio.checked) {
                    beaconCollapse.show(); // Show Beacon section
                    gpsCollapse.hide(); // Hide GPS section
                }
            });
        });

        document.addEventListener("DOMContentLoaded", function () {
            const tableBody = document.querySelector("#beaconListTable tbody");
            const addNewBeaconBtn = document.getElementById("addNewBeacon");
            const locationId = getLocationIdFromUrl();

            // Load existing beacons on page load
            loadBeaconList();

            // Fetch all beacons and render in the table
            function loadBeaconList() {
                fetch(`/LocationBeacon/GetBeacons?locationId=${locationId}`)
                    .then((response) => response.json())
                    .then((beacons) => {
                        tableBody.innerHTML = "";
                        beacons.forEach((beacon) => {
                            const row = createRow(beacon);
                            tableBody.appendChild(row);
                        });
                    })
                    .catch((error) => console.error("Error loading beacons:", error));
            }

            // Add New Beacon Row
            addNewBeaconBtn.addEventListener("click", function () {
                const newRow = createEditableRow();
                tableBody.appendChild(newRow);
            });

            // Create a row for an existing beacon
            function createRow(beacon) {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${beacon.beaconName}</td>
                    <td>${beacon.uuid}</td>
                    <td>${beacon.status ? "Active" : "Inactive"}</td>
                    <td>
                        <button type="button" class="btn btn-warning editBeacon"><i class="fas fa-edit"></i></button>
                        <button type="button" class="btn btn-danger deleteBeacon ms-2"><i class="fas fa-trash"></i></button>
                    </td>
                `;

                // Attach Edit and Delete event listeners
                row.querySelector(".editBeacon").addEventListener("click", function () {
                    const editableRow = createEditableRow(beacon);
                    row.replaceWith(editableRow);
                });

                row.querySelector(".deleteBeacon").addEventListener("click", function () {
                    if (confirm("Are you sure you want to delete this beacon?")) {
                        deleteBeacon(beacon.id, row);
                    }
                });

                return row;
            }

        // Create an editable row for adding or editing a beacon
        function createEditableRow(beacon = {}) {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>
                    <input type="text" class="form-control" value="${beacon.beaconName || ""}" placeholder="Enter Beacon Name">
                </td>
                <td>
                    <div class="input-group">
                        <input type="text" class="form-control uuidInput" value="${beacon.uuid || ""}" placeholder="Enter UUID">
                        <button type="button" class="btn btn-secondary generateGuidButton">Generate GUID</button>
                    </div>
                    <small class="text-danger uuidError" style="display: none;">Invalid GUID format.</small>
                </td>
                <td>
                    <select class="form-select">
                        <option value="true" ${beacon.status !== false ? "selected" : ""}>Active</option>
                        <option value="false" ${beacon.status === false ? "selected" : ""}>Inactive</option>
                    </select>
                </td>
                <td>
                    <button type="button" class="btn btn-primary saveBeacon"><i class="fas fa-save"></i></button>
                    <button type="button" class="btn btn-danger cancelBeacon ms-2">Cancel</button>
                </td>
            `;

            // Generate GUID button functionality
            row.querySelector(".generateGuidButton").addEventListener("click", function () {
                const uuidInput = row.querySelector(".uuidInput");
                uuidInput.value = generateGUID();
                hideGuidError(row); // Clear any previous error
            });

            // Save functionality
            row.querySelector(".saveBeacon").addEventListener("click", function () {
                if (validateGuid(row)) {
                    saveBeacon(row, beacon.id);
                }
            });

            // Cancel functionality
            row.querySelector(".cancelBeacon").addEventListener("click", function () {
                if (beacon.id) {
                    row.replaceWith(createRow(beacon));
                } else {
                    row.remove();
                }
            });

            return row;
        }

        // Generate a GUID
        function generateGUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                const r = (Math.random() * 16) | 0;
                const v = c === 'x' ? r : (r & 0x3) | 0x8;
                return v.toString(16);
            });
        }

        // Validate GUID format
        function validateGuid(row) {
            const uuidInput = row.querySelector(".uuidInput");
            const uuidError = row.querySelector(".uuidError");
            const guidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;

            if (!guidPattern.test(uuidInput.value.trim())) {
                showGuidError(row);
                return false;
            }

            hideGuidError(row);
            return true;
        }

        // Show GUID error
        function showGuidError(row) {
            const uuidError = row.querySelector(".uuidError");
            uuidError.style.display = "block";
        }

        // Hide GUID error
        function hideGuidError(row) {
            const uuidError = row.querySelector(".uuidError");
            uuidError.style.display = "none";
        }


            // Save a beacon via AJAX (Add or Update)
            function saveBeacon(row, id) {
                const inputs = row.querySelectorAll("input");
                const select = row.querySelector("select");
                const beacon = {
                    Id: id || 0,
                    BeaconName: inputs[0].value.trim(),
                    UUID: inputs[1].value.trim(),
                    Status: select.value === "true",
                    LocationId: locationId,
                };

                const url = id ? "/LocationBeacon/Edit" : "/LocationBeacon/Create";
                const method = id ? "PUT" : "POST";

                fetch(url, {
                    method: method,
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(beacon),
                })
                    .then((response) => response.json())
                    .then((savedBeacon) => {
                        row.replaceWith(createRow(savedBeacon));
                    })
                    .catch((error) => {
                        console.error("Error saving beacon:", error);
                        alert("Failed to save the beacon. Please try again.");
                    });
            }

            // Delete a beacon via AJAX
            function deleteBeacon(id, row) {
                fetch(`/LocationBeacon/Delete?id=${id}`, {
                    method: "DELETE",
                })
                    .then((response) => {
                        if (!response.ok) throw new Error("Failed to delete the beacon.");
                        row.remove();
                    })
                    .catch((error) => {
                        console.error("Error deleting beacon:", error);
                        alert("Failed to delete the beacon. Please try again.");
                    });
            }
        });

        // Function to extract the LocationId from the current URL
        function getLocationIdFromUrl() {
            const url = window.location.href;
            const urlSegments = url.split('/');
            return urlSegments[urlSegments.length - 1];
        }
    </script>




    <!-- Include Google Maps API with Drawing Library -->
}


