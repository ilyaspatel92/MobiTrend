@model Mobi.Web.Models.Employees.EmployeeModel

@{
    ViewData["Title"] = "Edit Employee";
}

<form asp-action="Edit" method="post" class="needs-validation custom-top-spacing" novalidate>
    <div class="card card-info card-outline mb-4 mx-3">
        <!-- Header Section -->
        <div class="card-header bg-white py-3 border-bottom">
            <div class="d-flex justify-content-between align-items-center">
                <!-- Title -->
                <h5 class="fw-bold mb-0">Edit Employee</h5>
                <!-- Buttons -->
                <div class="d-flex gap-2">
                    <a href="@Url.Action("List", "Employee")" class="btn btn-info btn-sm">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </a>
                    <button type="submit" class="btn btn-info btn-sm"><i class="fas fa-plus"></i> Update Employee</button>
                </div>
            </div>
        </div>

        <div class="card-body">
            <div class="row g-3">
                <input type="hidden" id="employeeId" value="@Model.Id" />

                <!-- Name (English) -->
                <div class="col-md-6">
                    <label asp-for="NameEng" class="form-label">Name (English)</label>
                    <input asp-for="NameEng" class="form-control" placeholder="Enter Name (English)" required>
                    <span asp-validation-for="NameEng" class="text-danger"></span>
                </div>

                <!-- Name (Arabic) -->
                <div class="col-md-6">
                    <label asp-for="NameArabic" class="form-label">Name (Arabic)</label>
                    <input asp-for="NameArabic" class="form-control" placeholder="Enter Name (Arabic)">
                    <span asp-validation-for="NameArabic" class="text-danger"></span>
                </div>

                <!-- Status -->
                <div class="col-md-6">
                    <label asp-for="Status" class="form-label">Status</label>
                    <select asp-for="Status" class="form-select" required>
                        <option value="true" selected="@Model.Status">Active</option>
                        <option value="false" selected="@(!Model.Status)">Inactive</option>
                    </select>
                    <span asp-validation-for="Status" class="text-danger"></span>
                </div>

                <!-- File Number -->
                <div class="col-md-6">
                    <label asp-for="FileNumber" class="form-label">File Number</label>
                    <input asp-for="FileNumber" class="form-control" placeholder="Enter File Number">
                    <span asp-validation-for="FileNumber" class="text-danger"></span>
                </div>

                <!-- Mobile Number -->
                <div class="col-md-6">
                    <label asp-for="MobileNumber" class="form-label">Mobile Number</label>
                    <input asp-for="MobileNumber" class="form-control" placeholder="Enter Mobile Number">
                    <span asp-validation-for="MobileNumber" class="text-danger"></span>
                </div>

                <!-- Email -->
                <div class="col-md-6">
                    <label asp-for="Email" class="form-label">Email</label>
                    <input asp-for="Email" type="email" class="form-control" placeholder="Enter Email Address">
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>

                <!-- Password (Optional for Editing) -->
                @* Uncomment if you want to allow updating the password *@
                @*<div class="col-md-6">
                    <label asp-for="Password" class="form-label">Password</label>
                    <input asp-for="Password" type="password" class="form-control" placeholder="Enter Password">
                    <span asp-validation-for="Password" class="text-danger"></span>
                </div>*@

                <!-- Company ID -->
                @* <div class="col-md-6">
                    <label asp-for="CompanyId" class="form-label">Company ID</label>
                    <input asp-for="CompanyId" class="form-control" placeholder="Enter Company ID" required>
                    <span asp-validation-for="CompanyId" class="text-danger"></span>
                </div> *@
                <div class="col-md-6">
                    <label asp-for="CID" class="form-label">CID</label><span class="text-danger">*</span>
                    <input asp-for="CID" type="CID" class="form-control" placeholder="Enter CID">
                    <span asp-validation-for="CID" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="UserName" class="form-label">UserName</label>
                    <input asp-for="UserName" type="UserName" class="form-control" placeholder="Enter UserName" disabled>
                    <span asp-validation-for="UserName" class="text-danger"></span>
                </div>
                <div class="col-md-12 mt-4">
                    <label class="form-label">Password</label>
                    <div class="input-group">
                        <input type="password" id="passwordInput" name="NewPassword" class="form-control" placeholder="Enter New Password" aria-describedby="passwordButton" disabled>
                        <button type="button" id="editPasswordButton" class="btn btn-secondary">Change Password</button>
                        <button type="button" id="savePasswordButton" class="btn btn-primary d-none">Save</button>
                        <button type="button" id="cancelPasswordButton" class="btn btn-danger d-none">Cancel</button>
                    </div>
                    <span id="passwordMessage" class="text-success mt-2 d-none"></span>
                </div>



            </div>
        </div>

        @* <div class="card-body mt-4">
            <h4 class="card-title">QR Code</h4>
            <div class="text-center">
                @if (!string.IsNullOrEmpty(Model.QrCode))
                {
                    <img src="@Model.QrCode" alt="QR Code" style="width: 150px; height: 150px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);" />
                }
                else
                {
                    <p class="text-muted">No QR Code available</p>
                }
            </div>
        </div> *@
    </div>
</form>

<!-- QR Code Section -->
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            'use strict';
            const forms = document.querySelectorAll('.needs-validation');
            Array.from(forms).forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        })();

        document.addEventListener("DOMContentLoaded", function () {
            const passwordInput = document.getElementById("passwordInput");
            const employeeIdInput = document.getElementById("employeeId");
            const editButton = document.getElementById("editPasswordButton");
            const saveButton = document.getElementById("savePasswordButton");
            const cancelButton = document.getElementById("cancelPasswordButton");
            const passwordMessage = document.getElementById("passwordMessage");

            // Enable editing mode
            editButton.addEventListener("click", function () {
                passwordInput.removeAttribute("disabled");
                passwordInput.value = ""; // Clear the password field
                saveButton.classList.remove("d-none");
                editButton.classList.add("d-none");
                cancelButton.classList.remove("d-none");
                passwordInput.focus();
            });

            // Cancel editing mode
            cancelButton.addEventListener("click", function () {
                passwordInput.setAttribute("disabled", true);
                saveButton.classList.add("d-none");
                cancelButton.classList.add("d-none");
                editButton.classList.remove("d-none");
            });

            // Save the password via AJAX
            saveButton.addEventListener("click", function () {
                const password = passwordInput.value.trim();
                const employeeId = employeeIdInput.value;

                if (!password) {
                    alert("Password cannot be empty.");
                    return;
                }

                // Make the AJAX POST request
                fetch("/Employee/AjaxChangePassword", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-TOKEN": document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ NewPassword: password, EmployeeId: employeeId })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            passwordMessage.textContent = "Password changed successfully!";
                            passwordMessage.classList.remove("d-none");
                            passwordMessage.classList.add("text-success");

                            // Reset UI
                            passwordInput.setAttribute("disabled", true);
                            saveButton.classList.add("d-none");
                            editButton.classList.remove("d-none");

                            setTimeout(() => {
                                passwordMessage.classList.add("d-none");
                            }, 3000);
                        } else {
                            passwordMessage.textContent = data.message;
                            passwordMessage.classList.remove("d-none");
                            passwordMessage.classList.add("text-danger");

                            // Reset UI
                            passwordInput.setAttribute("disabled", true);
                            saveButton.classList.add("d-none");
                            editButton.classList.remove("d-none");

                            setTimeout(() => {
                                passwordMessage.classList.add("d-none");
                            }, 3000);
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("Failed to change the password.");
                    });
            });
        });


    </script>
}
